{"version":3,"sources":["components/CalendarControls/index.js","components/CalendarPane/index.js","components/Calendar/index.js","App.js","serviceWorker.js","index.js"],"names":["CalendarControls","_ref","isPrevMonthBtnDisabled","setPreviousMonth","month","months","onMonthChange","year","onYearChange","years","isNextMonthBtnDisabled","setNextMonth","reset","react_default","a","createElement","className","disabled","onClick","value","onChange","map","i","key","CalendarPane","daysHeader","slots","day","Calendar","state","momentInstance","moment","days","weekdaysShort","_this","setState","setQueryString","props","push","getOverflowDays","blanks","firstDay","startOf","format","daysInPreviousMonth","subtract","daysInMonth","uuid","generate","isToday","dayOfMonth","isSame","date","getMonthDates","dates","totalDaysInMonth","onDateSelect","newInstance","Object","objectSpread","set","groupDaysByWeeks","allDays","overflowedDays","toConsumableArray","groupedDays","totalRequiredSlots","Math","ceil","length","j","numOfWeeks","daysInWeek","slice","setMonth","monthIndex","e","target","setYear","prevMonthIndex","nextMonthIndex","add","getQueryString","parse","window","location","search","this","monthDates","overflowDays","concat","components_CalendarControls","components_CalendarPane","PureComponent","App","selectedDate","_this2","components_Calendar","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2eb4f934.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./CalendarControls.css\";\n\nconst CalendarControls = ({\n  isPrevMonthBtnDisabled,\n  setPreviousMonth,\n  month,\n  months,\n  onMonthChange,\n  year,\n  onYearChange,\n  years,\n  isNextMonthBtnDisabled,\n  setNextMonth,\n  reset\n}) => {\n  return (\n    <div className=\"calendar-control\">\n      <button\n        className=\"calendar-control__month-arrow\"\n        disabled={isPrevMonthBtnDisabled}\n        onClick={setPreviousMonth}\n      >\n        {\"<\"}\n      </button>\n      <select value={month} onChange={onMonthChange}>\n        {months.map((month, i) => (\n          <option value={i} key={i}>\n            {month}\n          </option>\n        ))}\n      </select>\n      <select value={year} onChange={onYearChange}>\n        {years.map((year, i) => (\n          <option value={year} key={i}>\n            {year}\n          </option>\n        ))}\n      </select>\n      <button\n        className=\"calendar-control__month-arrow\"\n        disabled={isNextMonthBtnDisabled}\n        onClick={setNextMonth}\n      >\n        {\">\"}\n      </button>\n      <button onClick={reset}>Reset</button>\n    </div>\n  );\n};\n\nexport default CalendarControls;\n","import React from \"react\";\nimport \"./CalendarPane.css\";\n\nconst CalendarPane = ({ daysHeader, slots }) => (\n  <table className=\"calendar-pane\">\n    <thead className=\"calendar-pane__header\">\n      <tr>\n        {daysHeader.map((day, i) => (\n          <th key={i}>{day}</th>\n        ))}\n      </tr>\n    </thead>\n    <tbody className=\"calendar-pane__body\">{slots}</tbody>\n  </table>\n);\n\nexport default CalendarPane;\n","import React, { PureComponent } from \"react\";\nimport moment from \"moment\";\nimport uuid from \"short-uuid\";\nimport setQueryString from \"set-query-string\";\nimport getQueryString from \"query-string\";\nimport CalendarControls from \"../CalendarControls\";\nimport CalendarPane from \"../CalendarPane\";\n\nclass Calendar extends PureComponent {\n  state = {\n    momentInstance: moment()\n  };\n\n  componentDidMount() {\n    const monthIndex = getQueryString.parse(window.location.search).month;\n    if (monthIndex) {\n      this.setMonth(monthIndex);\n    }\n  }\n\n  days = moment.weekdaysShort();\n  months = moment.months();\n\n  reset = () => {\n    this.setState({ momentInstance: moment() });\n    setQueryString({ month: \"\" });\n    this.props.onChange(null);\n  };\n\n  years = (() => {\n    const years = [];\n    for (let i = moment().year() - 20; i < moment().year() + 20; i++) {\n      years.push(i);\n    }\n    return years;\n  })();\n\n  getOverflowDays = () => {\n    const blanks = [];\n    const firstDay = moment(this.state.momentInstance)\n      .startOf(\"month\")\n      .format(\"d\");\n    let daysInPreviousMonth = moment(this.state.momentInstance)\n      .subtract(1, \"months\")\n      .daysInMonth();\n    for (let i = firstDay - 1; i >= 0; i--) {\n      blanks.push(\n        <td className=\"overflow-days\" key={uuid.generate()}>\n          {daysInPreviousMonth - i}\n        </td>\n      );\n    }\n    return blanks;\n  };\n\n  isToday = dayOfMonth =>\n    moment().isSame(this.state.momentInstance, \"year\") &&\n    moment().isSame(this.state.momentInstance, \"month\") &&\n    dayOfMonth === moment().date();\n\n  getMonthDates = () => {\n    const dates = [];\n    const totalDaysInMonth = this.state.momentInstance.daysInMonth();\n    for (let i = 1; i <= totalDaysInMonth; i++) {\n      dates.push(\n        <td\n          key={uuid.generate()}\n          onClick={this.onDateSelect(i)}\n          className={this.isToday(i) ? \"date-active\" : \"\"}\n        >\n          {i}\n        </td>\n      );\n    }\n    return dates;\n  };\n\n  onDateSelect = dayOfMonth => () => {\n    const newInstance = moment({ ...this.state.momentInstance })\n      .set(\"date\", dayOfMonth);\n    this.setState({ momentInstance: newInstance });\n    this.props.onChange(newInstance);\n  };\n\n  groupDaysByWeeks = allDays => {\n    const overflowedDays = [...allDays];\n    const groupedDays = [];\n    const totalRequiredSlots = Math.ceil(allDays.length / 7) * 7;\n    for (let j = 1; j <= totalRequiredSlots - allDays.length; j++) {\n      overflowedDays.push(\n        <td className=\"overflow-days\" key={uuid.generate()}>\n          {j}\n        </td>\n      );\n    }\n    const numOfWeeks = Math.ceil(overflowedDays.length / 7);\n    for (let i = 0; i < numOfWeeks; i++) {\n      const daysInWeek = overflowedDays.slice(i * 7, (i + 1) * 7);\n      groupedDays.push(<tr key={uuid.generate()}>{daysInWeek}</tr>);\n    }\n    return groupedDays;\n  };\n\n  setMonth = monthIndex => {\n    const newInstance = moment({ ...this.state.momentInstance })\n      .set(\"month\", monthIndex);\n    this.setState({ momentInstance: newInstance });\n    setQueryString({ month: monthIndex });\n  };\n\n  onMonthChange = e => this.setMonth(e.target.value);\n\n  setYear = e => {\n    const newInstance = moment({ ...this.state.momentInstance })\n      .set(\"year\", e.target.value);\n    this.setState({ momentInstance: newInstance });\n  };\n\n  setPreviousMonth = () => {\n    const prevMonthIndex = moment({ ...this.state.momentInstance })\n      .subtract(1, \"months\")\n      .month();\n    this.setMonth(prevMonthIndex);\n  };\n\n  setNextMonth = () => {\n    const nextMonthIndex = moment({ ...this.state.momentInstance })\n      .add(1, \"months\")\n      .month();\n    this.setMonth(nextMonthIndex);\n  };\n\n  isNextMonthBtnDisabled = () =>\n    moment(this.state.momentInstance).month() === 11 &&\n    moment(this.state.momentInstance).year() === this.years[this.years.length - 1];\n\n  isPrevMonthBtnDisabled = () =>\n    moment(this.state.momentInstance).month() === 0 &&\n    moment(this.state.momentInstance).year() === this.years[0];\n\n  render() {\n    const monthDates = this.getMonthDates();\n    const overflowDays = this.getOverflowDays(monthDates);\n    const slots = this.groupDaysByWeeks([...overflowDays, ...monthDates]);\n    return (\n      <div>\n        <CalendarControls\n          isPrevMonthBtnDisabled={this.isPrevMonthBtnDisabled()}\n          setPreviousMonth={this.setPreviousMonth}\n          month={this.state.momentInstance.month()}\n          months={this.months}\n          onMonthChange={this.onMonthChange}\n          year={this.state.momentInstance.year()}\n          onYearChange={this.setYear}\n          years={this.years}\n          isNextMonthBtnDisabled={this.isNextMonthBtnDisabled()}\n          setNextMonth={this.setNextMonth}\n          reset={this.reset}\n        />\n        <CalendarPane daysHeader={this.days} slots={slots} />\n      </div>\n    );\n  }\n}\n\nCalendar.propTypes = {\n  onChange: () => {}\n};\n\nexport default Calendar;\n","import React, { Component } from \"react\";\nimport Calendar from \"./components/Calendar\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    selectedDate: null\n  };\n  render() {\n    return (\n      <div className=\"app\">\n        <Calendar\n          onChange={momentInstance =>\n            this.setState({\n              selectedDate:\n                momentInstance && momentInstance.format(\"DD-MM-YYYY\")\n            })\n          }\n        />\n        <b>\n          <br />\n          <br />\n          Selected date: {this.state.selectedDate ? this.state.selectedDate : 'Not selected'}\n        </b>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}